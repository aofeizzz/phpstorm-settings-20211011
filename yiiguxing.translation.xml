<application>
  <component name="AppStorage">
    <histories>
      <item value="输入" />
      <item value="extra input" />
      <item value="input" />
      <item value="respect" />
      <item value="grab" />
      <item value="extra column html" />
      <item value="render" />
      <item value="array merge" />
      <item value="array column" />
      <item value="Support for Symfony framework components." />
      <item value="Extends PhpStorm to support annotations in DocBlocks" />
      <item value="Support for Handlebars and Mustache template languages Features" />
      <item value="Code With Me is a new service created by JetBrains for collaborative development and pair programming. It enables you to share the currently opened project in your IDE with others, and work on it together in real time." />
      <item value="completed" />
      <item value="complete" />
      <item value="Synchronizes settings across all IDE installations. To sync, log in with your JetBrains Account (JBA). Settings synced are: UI and editor themes, keymaps, enabled and disabled plugins." />
      <item value="delivery" />
      <item value="Statement" />
      <item value="creat" />
      <item value="create" />
      <item value="Perform a model insert operation." />
      <item value="material" />
      <item value="material font" />
      <item value="accent" />
      <item value="Exposes a connection to MITM attacks. Use 2 (default) to stay safe." />
      <item value="expression expected" />
      <item value="expression expexted" />
      <item value="expression except" />
      <item value="expression" />
      <item value="JSON Web Token Parser and Analyzer. Visualize JWT contents in a tabular form Verify signature (HS256 and RS256 support) Verify validity of timestamp-based claims Visualize timestamp-based claims in unix / ISO / human relative format Edit claim values: dedicated editor for string, timestamp, boolean, numeric and raw JSON values Set default keypair for RS256 validation in Preferences." />
      <item value="This plugin provides &quot;Method References&quot; and &quot;Type Provider&quot; extracted from the Symfony Plugin. You can configure the plugin with simple per project files .ide-toolbox.metadata.json to support for eg $f-&gt;('date_time')-&gt;format, new Datetime('caret'). Also it improves some PhpStorm Core functionality." />
      <item value="Use 'cd ... || exit' or 'cd ... || return' in case cd fails." />
      <item value="Double quote array expansions to avoid re-splitting elements." />
      <item value="Remove backticks to avoid executing output." />
      <item value="Double quote to prevent globbing and word splitting." />
      <item value="Consider using pgrep instead of grepping ps output." />
      <item value="No data sources are configured to run this SQL and provide advanced code assistance. Disable this inspection via problem menu (Alt+Enter)." />
      <item value="Double quote array expansions to avoid re-splitting elements. See SC2068." />
      <item value="A custom Gruvbox theme, focus on more eye-friendly code colors. Support Java, Kotlin, Groovy, Scala, Javascript, Html, Xml, Sql, Shell... To install: Go to Settings (Preferences) | Plugins, find the theme plugin and install it. Restart IDE. Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown." />
      <item value="A plugin for JetBrains WebStorm to handle logs" />
      <item value="Provides a shortcut to open a file or commit in GitHub, Bitbucket, GitLab, Gitea, Gogs or GitBlit using the default browser. A Shortcut is also available to copy links to your clipboard. After installing select your remote host in Settings → Other Settings → GitLink. Make sure you have registered your project's root under the version control settings. Preferences → Version Control (see unregistered roots) To open a file in the default browser select View → Open in (your selected host). Shortcuts are also available on the annotation gutter and VCS log window." />
      <item value="Logtalk support for IntelliJ. This plugin provides syntax highlighting for Logtalk and some basic editing features: Parentheses matching. Multiline terms and comments folding and unfolding. Automatic line and block commenting/uncommenting of selection using IntelliJ standard shortcuts. Tooltips for operators and keywords." />
      <item value="A plugin that add support for Elastic Logstash config files Features Syntax highlighting Keyword completion Brace matching Auto formatting" />
      <item value="help developer to print debug message through Log.e" />
      <item value="Code highlighting based of log level: error, warn, info, etc. Intention to highlight columns (time, category, threads, stack frames) in log file editor. Folding of uninteresting events Hyperlinks of stack traces in log Navigation to source code that emit log events (F7). Go to next error action (Shift + F7) Extends selection Intention tp highlight distance between events (marks time as red) Advanced error stripe (heat map) Custom log format more info:" />
      <item value="This plugin supports the rendering of the most common ANSI graphic rendition sequences under IntelliJ editor. The following features are available: Configurable 'ANSI Aware' file extensions: Go to Preferences | Editor | File Types Under 'Recognized File Types' select 'ANSI Aware' Under 'Registered Patterns' add your custom 'ANSI Aware' file name patterns, *.log is added by default Press 'Apply' Switch between Preview and Plain mode: Right click on the editor Press 'Switch to Plain/Preview Mode' Alternatively use the shortcut 'ctrl meta A' while on the editor Only the below graphic rendition codes are supported: Reset code (0) Bold code (1) Italic code (3) Single Underline code (4) All text foreground color codes (30-37) All text background color codes (40-47) Customize ANSI colors: Go to Preferences | Editor | Colors &amp; Fonts | Console Colors Expand 'ANSI Colors' Customize the following foreground/background colors: Black Red Green Yellow Blue Magenta Cyan White Other colors are only supported by the console (not by the editor). Press 'Apply'" />
      <item value="Insert the given attributes and set the ID on the model." />
      <item value="$dh Item Listing" />
      <item value="Please ensure this is not a forgotten debug statement. Inspection info: Documentation can be found here" />
      <item value="The IntelliVue plugin for IntelliJ provides analysis, actions, and utilities for Vue Single File Components. This plugin adds additional functionality on top of the standard Vue plugin. Full undo-redo support is enabled, so you are assured that your important code will not get corrupted by unexpected operations. `Actions` and `Intentions` are added to create and navigate from references to implementation. When creating a new Vue component option, a dialog is displayed." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="257" />
        <entry key="ENGLISH" value="257" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="KURDISH" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="WELSH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1633315653765" />
  </component>
  <component name="Settings">
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="keepFormat" value="true" />
    <option name="phoneticFontFamily" value="Arial" />
    <option name="primaryFontFamily" value="Microsoft YaHei" />
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translateDocumentation" value="true" />
  </component>
</application>